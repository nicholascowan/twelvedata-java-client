name: Maven Build and Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.2)'
        required: false
        default: ''

jobs:
  # Job for release builds when GitHub release is published
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
    - name: Update version in pom.xml
      run: |
        VERSION=${{ steps.version.outputs.version }}
        echo "Updating version to: $VERSION"
        sed -i "s/<version>.*<\/version>/<version>$VERSION<\/version>/" pom.xml
        echo "Updated pom.xml version:"
        grep -oP '<version>\K[^<]+' pom.xml | head -1
    - name: Run tests
      run: mvn clean test
    - name: Build and deploy release
      run: mvn clean deploy -P github -s .github/maven/settings.xml -Dgpg.skip=true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ steps.version.outputs.version }}
        path: target/*.jar
    - name: Prepare next SNAPSHOT version
      run: |
        VERSION=${{ steps.version.outputs.version }}
        # Parse version components
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR="${VERSION_PARTS[0]}"
        MINOR="${VERSION_PARTS[1]}"
        PATCH="${VERSION_PARTS[2]}"
        # Increment patch version for next SNAPSHOT
        NEXT_PATCH=$((PATCH + 1))
        NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH-SNAPSHOT"
        echo "Next SNAPSHOT version: $NEXT_VERSION"
        sed -i "s/<version>.*<\/version>/<version>$NEXT_VERSION<\/version>/" pom.xml
    - name: Commit and push next SNAPSHOT version
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pom.xml
        git commit -m "Bump to $NEXT_VERSION for next development cycle"
        git push origin main

  # Job for manual version publishing
  manual-release:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.version != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Update version in pom.xml
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "Updating version to: $VERSION"
        sed -i "s/<version>.*<\/version>/<version>$VERSION<\/version>/" pom.xml
        echo "Updated pom.xml version:"
        grep -oP '<version>\K[^<]+' pom.xml | head -1
    - name: Run tests
      run: mvn clean test
    - name: Build and deploy release
      run: mvn clean deploy -P github -s .github/maven/settings.xml -Dgpg.skip=true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}
    - name: Create Git tag
      run: |
        VERSION="${{ github.event.inputs.version }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pom.xml
        git commit -m "Release version $VERSION"
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push origin main
        git push origin "v$VERSION"
    - name: Create GitHub Release
      run: |
        VERSION="${{ github.event.inputs.version }}"
        gh release create "v$VERSION" \
          --title "Release v$VERSION" \
          --notes "Release v$VERSION of TwelveData Java Client" \
          --target main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Prepare next SNAPSHOT version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        # Parse version components
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR="${VERSION_PARTS[0]}"
        MINOR="${VERSION_PARTS[1]}"
        PATCH="${VERSION_PARTS[2]}"
        # Increment patch version for next SNAPSHOT
        NEXT_PATCH=$((PATCH + 1))
        NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH-SNAPSHOT"
        echo "Next SNAPSHOT version: $NEXT_VERSION"
        sed -i "s/<version>.*<\/version>/<version>$NEXT_VERSION<\/version>/" pom.xml
    - name: Commit and push next SNAPSHOT version
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pom.xml
        git commit -m "Bump to $NEXT_VERSION for next development cycle"
        git push origin main 