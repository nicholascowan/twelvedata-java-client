name: Bump Maven Version

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      custom_version:
        description: 'Custom version (overrides version_type if provided)'
        required: false
        type: string
      create_branch:
        description: 'Create a new branch for the version bump'
        required: false
        default: true
        type: boolean
  push:
    branches:
      - develop
    paths:
      - 'pom.xml'

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: new_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        VERSION_TYPE="${{ github.event.inputs.version_type }}"
        CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
        
        if [ -n "$CUSTOM_VERSION" ]; then
          NEW_VERSION="$CUSTOM_VERSION"
          echo "Using custom version: $NEW_VERSION"
        else
          # Parse current version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          case $VERSION_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
            *)
              echo "Invalid version type: $VERSION_TYPE"
              exit 1
              ;;
          esac
          echo "Calculated new version: $NEW_VERSION"
        fi
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Create version bump branch
      if: github.event.inputs.create_branch != 'false'
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        BRANCH_NAME="bump-version-$NEW_VERSION"
        git checkout -b "$BRANCH_NAME"
        echo "Created branch: $BRANCH_NAME"

    - name: Update version in pom.xml
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        # Use a more specific sed pattern to only update the project version
        sed -i "s/<version>${{ steps.current_version.outputs.current_version }}<\/version>/<version>$NEW_VERSION<\/version>/" pom.xml
        echo "Updated pom.xml to version $NEW_VERSION"

    - name: Verify version update
      run: |
        UPDATED_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        EXPECTED_VERSION="${{ steps.new_version.outputs.new_version }}"
        if [ "$UPDATED_VERSION" != "$EXPECTED_VERSION" ]; then
          echo "Version verification failed: expected $EXPECTED_VERSION, got $UPDATED_VERSION"
          exit 1
        fi
        echo "Version verification successful: $UPDATED_VERSION"

    - name: Run tests with new version
      run: mvn clean test

    - name: Build project with new version
      run: mvn clean package -DskipTests

    - name: Commit and push version bump
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        COMMIT_MESSAGE="Bump version to $NEW_VERSION"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pom.xml
        git commit -m "$COMMIT_MESSAGE"
        
        if [ "${{ github.event.inputs.create_branch }}" != "false" ]; then
          git push --set-upstream origin "$(git branch --show-current)"
        else
          git push
        fi

    - name: Create Pull Request
      if: github.event.inputs.create_branch != 'false'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: "Bump version to ${{ steps.new_version.outputs.new_version }}"
        body: |
          ## Version Bump
          
          This PR bumps the project version from `${{ steps.current_version.outputs.current_version }}` to `${{ steps.new_version.outputs.new_version }}`.
          
          **Changes:**
          - Updated version in `pom.xml`
          - All tests passing
          - Build successful
          
          **Bump Type:** ${{ github.event.inputs.version_type }}
          
          Please review and merge when ready.
        branch: bump-version-${{ steps.new_version.outputs.new_version }}
        base: master

    - name: Create version bump summary
      run: |
        echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Version**: ${{ steps.current_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Version**: ${{ steps.new_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bump Type**: ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.create_branch }}" != "false" ]; then
          echo "- **Branch Created**: bump-version-${{ steps.new_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Version bump completed successfully!" >> $GITHUB_STEP_SUMMARY 